{"version":3,"file":"static/js/387.b3282da9.chunk.js","mappings":"mRAEaA,E,OAAgBC,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,Q,SCkDtC,EA7CgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAERE,GAA4BC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAA0BL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAetB,OAbAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAJ,IAAAA,MAAA,SAAAK,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,GACSC,EAAAA,EAAAA,IAAiB,CAAExB,QAAAA,IAAW,KAAD,EAAxC,GAAwCkB,EAAAG,EAAAI,KAAnDN,EAAMD,EAANC,SAAQC,EAAGF,EAAHE,KACR,CAADC,EAAAE,KAAA,QACS,OAAdZ,EAASS,GAAKC,EAAAK,OAAA,iBAGhBnB,EAAUY,GAAQ,wBAAAE,EAAAM,OAAA,GAAAV,EAAA,KACnB,kBAPmB,OAAAH,EAAAc,MAAA,KAAAC,UAAA,KASpBhB,GACF,GAAG,CAACb,IAEAU,GAEAoB,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CAAAC,SAAA,CAAC,kDACsChC,EAAQ,KAAGU,KAKlD,OAAXJ,GACK2B,EAAAA,EAAAA,KAACC,EAAAA,EAAmB,CAACC,cAAc,OAAOC,WAAW,SAGvD9B,GAAUA,EAAO+B,SAAW/B,EAAO+B,QAAQC,QAChDL,EAAAA,EAAAA,KAACrC,EAAa,CAAAoC,SACX1B,EAAO+B,QAAQE,KAAI,SAAAjC,GAAM,OACxBwB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,WAAS1B,EAAOkC,WACpBP,EAAAA,EAAAA,KAAA,KAAAD,SAAI1B,EAAOmC,YAFJnC,EAAOoC,GAGX,MAIT,yCAEJ,C","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsStyled = styled.ul``;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { WrapStyled } from '../Home/Home.styled';\nimport { FullContainerLoader } from '../Loader/Loader';\nimport { fetchMovieReview } from '../../api/moviedb';\nimport { ReviewsStyled } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [review, setReview] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getMovieReview = async () => {\n      const { result, err } = await fetchMovieReview({ movieId });\n      if (err) {\n        setError(err);\n        return;\n      }\n      setReview(result);\n    };\n\n    getMovieReview();\n  }, [movieId]);\n\n  if (error) {\n    return (\n      <WrapStyled>\n        Error happened while loading reviews for movie {movieId}: {error}\n      </WrapStyled>\n    );\n  }\n\n  if (review === null) {\n    return <FullContainerLoader paddingBottom=\"10px\" paddingTop=\"10px\" />;\n  }\n\n  return review && review.results && review.results.length ? (\n    <ReviewsStyled>\n      {review.results.map(review => (\n        <li key={review.id}>\n          <h6>Author: {review.author}</h6>\n          <p>{review.content}</p>\n        </li>\n      ))}\n    </ReviewsStyled>\n  ) : (\n    \"We don't have any review for this movie\"\n  );\n};\n\nexport default Reviews;\n"],"names":["ReviewsStyled","styled","_templateObject","_taggedTemplateLiteral","movieId","useParams","_useState","useState","_useState2","_slicedToArray","review","setReview","_useState3","_useState4","error","setError","useEffect","getMovieReview","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$fetchMovieRevi","result","err","_context","prev","next","fetchMovieReview","sent","abrupt","stop","apply","arguments","_jsxs","WrapStyled","children","_jsx","FullContainerLoader","paddingBottom","paddingTop","results","length","map","author","content","id"],"sourceRoot":""}